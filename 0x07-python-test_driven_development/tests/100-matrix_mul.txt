The ``100-matrix.mul`` module
=============================
This module contains only one function: matrix_mul.

Using ``matrix_mul``
--------------------

First import
~~~~~~~~~~~~
First import ``matrix_mul`` from the ``100-matrix.mul`` module. Since the file name contains a numeral, you can't use the simple ``from 100-matrix.mul import matrix_mul``. You can instead use the following syntax:

    >>> matrix_mul = __import__('100-matrix_mul').matrix_mul

Normal Use
~~~~~~~~~~
Now matrix_mul can be used to find the product of two int/float matricies, so long as the width of ``m_a`` in columns is equal to the height of ``m_b`` in rows:

    >>> matrix_mul([[1, 2, 3], [4, 5, 6]], [[1, 2], [3, 4], [5, 6]])
    [[22, 28], [49, 64]]

The function can take floating point values as well as integers, but the resulting values will be represented as floats if any constituent value are a floats:

    >>> matrix_mul([[1, 2.5, 3], [4, 5, 6]], [[1, 2], [3, 4], [5, 6]])
    [[23.5, 30.0], [49, 64]]

Exceptions
~~~~~~~~~~
Both ``m_a`` and ``m_b`` have a number of requirements for succesful matrix multiplication:

- Both must be lists, or TypeErrors ``m_a must be a list`` or ``m_b must be a list`` arise.

    >>> matrix_mul('asdf', [[1 , 2], [3, 4]])
    Traceback (most recent call last):
        ...
    TypeError: m_a must be a list

    >>> matrix_mul([[1, 2], [3, 4]], ([1, 2], [3, 4]))
    Traceback (most recent call last):
        ...
    TypeError: m_b must be a list

- Both must be lists of lists, or TypeErrors ``m_a must be a list of lists`` or ``m_b must be a list of lists`` arise.

    >>> matrix_mul(['asdf', 'jkl;'], [[1 , 2], [3, 4]])
    Traceback (most recent call last):
        ...
    TypeError: m_a must be a list of lists

    >>> matrix_mul([[1, 2], [3, 4]], [1, 2, 3, 4])
    Traceback (most recent call last):
        ...
    TypeError: m_b must be a list of lists

- Both must not be empty in either dimension (``[]`` or ``[[]]``,) or ValueErrors ``m_a can't be empty`` or ``m_b can't be empty`` arise.

    >>> matrix_mul([], [[1, 2], [3, 4]])
    Traceback (most recent call last):
        ...
    ValueError: m_a can't be empty

    >>> matrix_mul([[1, 2], [3, 4]], [[1, 2], []])
    Traceback (most recent call last):
        ...
    ValueError: m_b can't be empty

- Both must have second dimension elements of only ints or floats, or TypeErrors ``m_a should contain only integers or floats`` or ``m_b should contain only integers or floats`` arise.

    >>> matrix_mul([[1, '2'], [3, 4]], [[1, 2], [3, 4]])
    Traceback (most recent call last):
        ...
    TypeError: m_a should contain only integers or floats

    >>> matrix_mul([[1, 2], [3, 4]], [[1, 2], [[3], 4]])
    Traceback (most recent call last):
        ...
    TypeError: m_b should contain only integers or floats

- Each must be "rectangluar," with rows of equal length, or TypeErrors ``each row of m_a must be of the same size`` or ``each row of m_b must be of the same size`` arise.

    >>> matrix_mul([[1, 2], [3, 4, 5]], [[1, 2], [3, 4]])
    Traceback (most recent call last):
        ...
    TypeError: each row of m_a must be of the same size

    >>> matrix_mul([[1, 2], [3, 4]], [[1], [3, 4]])
    Traceback (most recent call last):
        ...
    TypeError: each row of m_b must be of the same size

- It must be possible to perform matrix multiplication, or ValueError ``m_a and m_b can't be multiplied`` will arise. Failure can happen  as mentioned in `Normal Use`_ if the width of ``m_a`` in columns is not equal to the height of ``m_b`` in rows:

    >>> matrix_mul([[1, 2, 3], [4, 5, 6]], [[1, 2], [3, 4]])
    Traceback (most recent call last):
        ...
    ValueError: m_a and m_b can't be multiplied

    >>> matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4], [5, 6]])
    Traceback (most recent call last):
        ...
    ValueError: m_a and m_b can't be multiplied
